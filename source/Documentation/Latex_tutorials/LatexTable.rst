.. _DocumentationLatexTable:

Generate a Latex Table
""""""""""""""""""""""
Purpose
'''''''
The purpose of this tutorial is to demonstrate how to automate the generation of a table in Latex. This is useful because it **avoids copy-and-paste errors**.

This tutorial describes the overall workflow, then have several examples with increasing complexity. This tutorial assumes that you have data arranged in some sort of an array in a Python of Matlab script.

Workflow
''''''''
This workflow assumes that you are using some sort of Python or Matlab script.

#) Start with an array that contains the data that will compose the table. Normally the rows and columns of the array correspond to the rows and columns of the table. If you think this tutorial will organize your data for you, then your problems lie outside the scope of this tutorial.
#) In a for loop, populate a string variable that contains you data and appropriate Latex formatting.
#) Print that string, and copy-and-paste it to a .tex file.

.. _DocumentationLatexTableMinumumWorkingExample:

Minimum Working Example
'''''''''''''''''''''''
This section shows a minimum working example. Later examples will build upon this example to show how to add useful features to the table.

Python
------
This is the Python script that generates and prints the string that is copy-and-pasted into the .tex file.

.. literalinclude:: /Documentation/Latex_tutorials/Scripts/MinimumWorkingExample.py
    :language: python

Matlab
------
This is the Matlab script that generates and prints the string that is copy-and-pasted into the .tex file.

.. literalinclude:: /Documentation/Latex_tutorials/Scripts/MinimumWorkingExample.m
    :language: matlab

Latex
-----
This is the .tex file that the printed output of the python script is copy-and-pasted to. The highlighed lines show the values that were generated by the Python script shown above.

.. literalinclude:: /Documentation/Latex_tutorials/Scripts/MinimumWorkingExample.tex
    :language: latex
    :emphasize-lines: 15-26
